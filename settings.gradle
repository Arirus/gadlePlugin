rootProject.name = "Plugin"
include ':app'
include ':plugin'

gradle.addBuildListener(new BuildListener(){

    @Override
    void beforeSettings(Settings settings) {
        println("*** settings beforeSettings $settings")
    }

    @Override
    void settingsEvaluated(Settings settings) {
        println("*** settings settingsEvaluated $settings")
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println("*** settings projectsLoaded $gradle")
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println("*** settings projectsEvaluated $gradle")
    }

    @Override
    void buildFinished(BuildResult result) {
        println("*** settings buildFinished ${result.getAction()}")
    }
})


//初始化阶段开始时间
long beginOfSetting = System.currentTimeMillis()
//配置阶段开始时间
def beginOfConfig
//配置阶段是否开始了，只执行一次
def configHasBegin = false
//存放每个 build.gradle 执行之前的时间
def beginOfProjectConfig = new HashMap()
//执行阶段开始时间
def beginOfTaskExecute
//初始化阶段执行完毕
gradle.projectsLoaded {
    println "初始化总耗时 ${System.currentTimeMillis() - beginOfSetting} ms"
}

//build.gradle 执行前
gradle.beforeProject {Project project ->
    if(!configHasBegin){
        configHasBegin = true
        beginOfConfig = System.currentTimeMillis()
    }
    beginOfProjectConfig.put(project,System.currentTimeMillis())
}

//build.gradle 执行后
gradle.afterProject {Project project ->
    def begin = beginOfProjectConfig.get(project)
    println "配置阶段，$project 耗时：${System.currentTimeMillis() - begin} ms"
}

// 配置阶段完毕
// 可以尝试执行 app:checkDebugManifest
gradle.taskGraph.whenReady {
    println("--- whenReady task nums:"+it.getAllTasks().size())
    it.getAllTasks().each{ task->
        println("--- whenReady task:"+task.name)
    }

    println "配置阶段总耗时：${System.currentTimeMillis() - beginOfConfig} ms"
    beginOfTaskExecute = System.currentTimeMillis()
}

//执行阶段
// 统计每个方法的时间  和  输入输出目录
gradle.taskGraph.beforeTask {Task task ->
    task.doFirst {
        task.ext.beginOfTask = System.currentTimeMillis()
    }

    task.doLast {
        println "执行阶段，$task 耗时：${System.currentTimeMillis() - task.ext.beginOfTask} ms"
    }

    println("--- task name ${task.name} ${task.description}")

    task.inputs.files.each { fileTemp -> println 'input file:' + fileTemp.absolutePath
    }

    println '---------------------------------------------------'
    task.outputs.files.each { fileTemp -> println 'output file:' + fileTemp.absolutePath
    }

}

gradle.buildFinished {
    if(beginOfTaskExecute == null){
        println "执行方法有误 beginOfTaskExecute 未赋值"
        return
    }
    println "执行阶段总耗时：${System.currentTimeMillis() - beginOfTaskExecute} ms"
}
